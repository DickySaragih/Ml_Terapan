# -*- coding: utf-8 -*-
"""Ml_terapan_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o4U-c2Sp-aVPvQAvJnA3G03Qm2nj_Cr3

## Import libreries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor, plot_tree
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.feature_extraction.text import TfidfVectorizer

"""## Loading dataset"""

url = "https://raw.githubusercontent.com/DickySaragih/Ml_Terapan/refs/heads/main/Data_siswa.csv"  # Ganti dengan URL kamu

# Load dataset
siswa_df = pd.read_csv(url)

# Tampilkan struktur awal dataset
print("\nInformasi Dataset:")
siswa_df.info()
print("\nStatistik Deskriptif:")
print(siswa_df.describe())

"""## Data Preparation"""

# Buat kolom target 'nilai_akhir' sebagai rata-rata dari tiga skor
siswa_df['nilai_akhir'] = siswa_df[['math score', 'reading score', 'writing score']].mean(axis=1)

# Konversi kolom tersebut menjadi representasi TF-IDF
if 'parental level of education' in siswa_df.columns:
    tfidf = TfidfVectorizer()
    tfidf_matrix = tfidf.fit_transform(siswa_df['parental level of education'].astype(str))
    tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf.get_feature_names_out())
    siswa_df = pd.concat([siswa_df.drop(columns=['parental level of education']), tfidf_df], axis=1)

# Pisahkan fitur dan target
y = siswa_df['nilai_akhir']
X = siswa_df.drop(columns=['nilai_akhir'])

# One-hot encoding untuk fitur kategorik
X_encoded = pd.get_dummies(X, drop_first=True)

# Split data (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

"""## Modeling

"""

# Model 1: Regresi Linier
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

# Model 2: Decision Tree Regressor
dt_model = DecisionTreeRegressor(max_depth=5, random_state=42)
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)

"""# Evaluasi Model"""

print("\nEvaluasi Regresi Linier")
print("R2 Score:", r2_score(y_test, y_pred_lr))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_lr))) # Calculate RMSE manually

print("\nEvaluasi Decision Tree")
print("R2 Score:", r2_score(y_test, y_pred_dt))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_dt))) # Calculate RMSE manually

"""## Visualisasi Model"""

# Korelasi dengan nilai akhir
plt.figure(figsize=(12, 8))
corr = siswa_df.corr(numeric_only=True)
sns.heatmap(corr[['nilai_akhir']].sort_values(by='nilai_akhir', ascending=False), annot=True, cmap='YlGnBu')
plt.title("Korelasi Fitur dengan Nilai Akhir")
plt.show()